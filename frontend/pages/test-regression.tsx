import Meta from "$components/layout/Meta";
import Scaffolding from "$components/layout/Scaffolding";
import { Button, Col, Input, message, Upload, Select, Modal } from "antd";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import {
  CheckCircleOutlined,
  CloseCircleOutlined,
  InboxOutlined,
} from "@ant-design/icons";

import CodeMirror, { EditorView } from "@uiw/react-codemirror";
import { sql as codemirrorSql } from "@codemirror/lang-sql";
import { twMerge } from "tailwind-merge";
import setupBaseUrl from "$utils/setupBaseUrl";

const { Dragger } = Upload;

interface ValidationResult {
  /**
   * Whether this query was correctly generated by the model or not.
   */
  correct: boolean;
  model_sql: string;
}

interface RegressionItem {
  /**
   * This is the array of questions. If it's more than 1 question, the last one will be assumed as the main question, which is a "follow on" question of the first len - 1 questions.
   */
  questions: string[];
  /**
   * The correct SQL.
   */
  sql: string;

  /** id of this question. Generated at run time.*/
  id: string;

  /**
   * Whether we have validated this question or not
   */
  validationResult?: ValidationResult;
}

/**
 * Contains all the regression items so far.
 */
type RegressionItems = RegressionItem[];

export default function TestRegressionPage() {
  const [apiKeyNames, setApiKeyNames] = useState([]);
  const [apiKeyName, setApiKeyName] = useState(null);

  const input = useRef(null);
  const editor = useRef(null);

  const [queries, setQueries] = useState<RegressionItems>([]);

  const [questionToBeAdded, setQuestionToBeAdded] = useState<RegressionItem>({
    questions: [],
    sql: "",
    id: crypto.randomUUID(),
  });

  const previousQuestions = useMemo(() => {
    return questionToBeAdded.questions.slice(
      0,
      questionToBeAdded.questions.length - 1
    );
  }, [questionToBeAdded.questions]);

  const mainQuestion = useMemo(() => {
    return questionToBeAdded.questions.slice(-1);
  }, [questionToBeAdded.questions]);

  const [inputVal, setInputVal] = useState("");

  const getApiKeyNames = async (token) => {
    const res = await fetch(
      (process.env.NEXT_PUBLIC_AGENTS_ENDPOINT || "") + "/get_api_key_names",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          token: token,
        }),
      }
    );
    if (!res.ok) {
      throw new Error(
        "Failed to get api key names - are you sure your network is working?"
      );
    }
    const data = await res.json();
    setApiKeyNames(data.api_key_names);
  };

  const [token, setToken] = useState(null);

  const [filter, setFilter] = useState(""); // filter for search

  const [loading, setLoading] = useState<string | boolean>(false);

  useEffect(() => {
    const apiKeyName = localStorage.getItem("defogDbSelected");
    const token = localStorage.getItem("defogToken");
    getApiKeyNames(token);
    if (apiKeyName) {
      setApiKeyName(apiKeyName);
    } else {
      setApiKeyName(apiKeyNames[0]);
    }
    setToken(token);
  }, []);

  useEffect(() => {
    if (apiKeyName) {
      localStorage.setItem("defogDbSelected", apiKeyName);
    }
  }, [apiKeyName]);

  const getRegressionResults = useCallback(
    async (query: RegressionItem = null) => {
      try {
        setLoading(query ? query.id : "all");
        const res = await fetch(
          setupBaseUrl("http", `readiness/regression_results`),
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: token,
              key_name: apiKeyName,
              // we can either test with single query or with all the queries
              queries: query ? [query] : queries,
            }),
          }
        );
        const data = await res.json();
        const queryWiseResults = data["query_wise_results"];

        // put in validationResult
        setQueries((prev) => {
          return prev.map((item) => {
            return {
              ...item,
              validationResult:
                queryWiseResults[item.id] || item.validationResult,
            };
          });
        });
      } catch (e) {
        console.log(e);
      } finally {
        setLoading(false);
      }
    },
    [queries, apiKeyName, token]
  );

  return (
    <div className="flex justify-center">
      <Meta />
      <Scaffolding id={"view-feedback"} userType={"admin"}>
        {apiKeyNames.length > 1 ? (
          <div>
            <Col span={24} style={{ paddingBottom: "1em" }}>
              <Select
                style={{ width: "100%" }}
                title="Select API Key"
                onChange={(e) => {
                  setApiKeyName(e);
                }}
                options={apiKeyNames.map((item) => {
                  return { value: item, key: item, label: item };
                })}
                value={apiKeyName}
              />
            </Col>
          </div>
        ) : null}
        <div className="flex flex-col gap-3 mb-4">
          <div className="grid grid-cols-4 md:grid-cols-12 relative w-full bg-gray-50 rounded-md border gap-2 divide-x">
            <div className="col-span-4">
              <Dragger
                name={"file"}
                showUploadList={false}
                rootClassName="*:text-left *:border-none *:bg-transparent text-gray-800"
                accept=".json"
                onDrop={(e) => {
                  const file = e.dataTransfer.files[0];
                  if (file.type !== "application/json") {
                    message.error("Only JSON files accepted");
                    return;
                  }

                  // read the file as json, and
                  // check that the format of this json matches the RegressionItem type
                  const reader = new FileReader();

                  reader.readAsText(file);

                  reader.onload = async (e) => {
                    const result = e.target.result;

                    try {
                      const json = JSON.parse(result.toString());
                      if (json instanceof Array) {
                        if (
                          json.every((item) => {
                            return (
                              item.questions instanceof Array &&
                              item.sql &&
                              typeof item.sql === "string"
                            );
                          })
                        ) {
                          // add an id
                          json.forEach((item) => {
                            item.id = crypto.randomUUID();
                            item.validationResult =
                              item.validationResult || null;
                          });

                          setQueries(json);
                          message.success("JSON uploaded successfully");
                        } else {
                          message.error(
                            "Invalid JSON format. The JSON should be an array, and each item must have a `questions` property which is an array, and an `sql` property which is a string."
                          );
                        }
                      } else {
                        message.error("Could not upload JSON.");
                      }
                    } catch (e) {
                      message.error("Could not upload JSON.");
                    }
                  };
                }}
              >
                <InboxOutlined className="text-4xl"></InboxOutlined>
                <h1 className="font-bold text-sm mb-2">Upload a JSON file</h1>
                <p className="mb-2">
                  Click or drag files to this area to upload
                </p>
              </Dragger>
            </div>

            <div className="col-span-8">
              <div className="flex flex-row items-center border-b p-4">
                <h1 className="text-sm font-bold text-gray-800">
                  Or add a question manually
                </h1>
                <div className="grow text-right">
                  <Button
                    type={"primary"}
                    onClick={() => {
                      if (
                        questionToBeAdded.questions.length === 0 &&
                        !input.current.input.value
                      ) {
                        message.error("Please add at least one question");
                        return;
                      } else if (!questionToBeAdded.sql) {
                        message.error("Please add the SQL query");
                        return;
                      } else if (
                        questionToBeAdded.questions.length === 0 &&
                        input.current.input.value
                      ) {
                        setQueries([
                          {
                            questions: [input.current.input.value],
                            sql: questionToBeAdded.sql || "",
                            id: crypto.randomUUID(),
                            validationResult: null,
                          },
                          ...queries,
                        ]);

                        input.current.input.value = "";
                      } else {
                        setQueries([questionToBeAdded, ...queries]);
                      }

                      setQuestionToBeAdded({
                        questions: [],
                        sql: "",
                        id: crypto.randomUUID(),
                        validationResult: null,
                      });

                      input.current.input.value = "";
                    }}
                  >
                    Add
                  </Button>
                </div>
              </div>
              <div className="py-4">
                <div className="grid grid-cols-10 relative px-4 gap-3 ">
                  <div className="col-span-4 relative flex flex-col p-4">
                    <div className="previous-questions relative">
                      {previousQuestions.length > 0 && (
                        <>
                          <div className="absolute z-[2] top-0 -left-2 w-1 h-full border border-r-0 border-gray-300"></div>
                          {/* <div className="absolute z-[1] -bottom-[1.5em] -left-5 w-3 h-[50%] min-h-10 border-b border-l border-t border-gray-300"></div> */}
                        </>
                      )}

                      {previousQuestions.map((question, index) => {
                        return (
                          <div
                            key={index}
                            className={twMerge("relative group text-sm mb-1")}
                          >
                            <div className="flex flex-row items-center">
                              {question}
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    <div className="main-question">
                      {mainQuestion.map((question, index) => {
                        return (
                          <div
                            key={index}
                            className={twMerge(
                              "relative group text-lg font-semibold mb-4",
                              questionToBeAdded.questions.length > 1 &&
                                "mb-4 mt-2"
                            )}
                          >
                            <div className="flex flex-row items-center">
                              {question}
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    <div className="flex flex-row items-center group text-gray-500">
                      <div className="flex flex-col items-start gap-2">
                        <span className="text-sm">
                          {questionToBeAdded.questions.length
                            ? "Keep typing to create follow-on questions"
                            : "Type and press Enter to add a question"}
                        </span>
                        <Input
                          size="middle"
                          type="text"
                          placeholder="New question"
                          className="rounded-md border-gray-300 p-1 px-2"
                          ref={input}
                          onChange={(e) => {
                            setInputVal(e.target.value);
                          }}
                          value={inputVal}
                          onPressEnter={(e) => {
                            if (e.currentTarget.value === "") {
                              return;
                            }

                            setQuestionToBeAdded({
                              ...questionToBeAdded,
                              questions: [
                                ...questionToBeAdded.questions,
                                e.currentTarget.value,
                              ],
                            });

                            setInputVal("");
                          }}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="col-span-6 relative flex flex-col gap-2 p-4">
                    <span className="text-sm text-gray-500">
                      Enter the correct SQL for the final question here
                    </span>
                    <CodeMirror
                      className="border border-gray-300"
                      extensions={[codemirrorSql(), EditorView.lineWrapping]}
                      value={questionToBeAdded.sql}
                      basicSetup={{
                        lineNumbers: false,
                      }}
                      ref={editor}
                      editable={true}
                      onChange={(value) => {
                        setQuestionToBeAdded({
                          ...questionToBeAdded,
                          sql: value,
                        });
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="h-10 w-full flex items-center">
            <div className="h-0.5 w-full bg-gray-300"></div>
          </div>

          <div className="bg-gray-50 rounded-md border">
            <div className="flex flex-row items-center mb-4 border-b p-4">
              <h1 className="text-sm font-bold text-gray-800">
                Added questions
              </h1>
              <div className="grow text-right space-x-2">
                <Button
                  onClick={() => {
                    const element = document.createElement("a");
                    const file = new Blob([JSON.stringify(queries, null, 2)], {
                      type: "application/json",
                    });
                    element.href = URL.createObjectURL(file);
                    element.download = "regression.json";
                    document.body.appendChild(element); // Required for this to work in FireFox
                    element.click();
                  }}
                >
                  Download JSON
                </Button>
                <Button
                  type="primary"
                  loading={loading === "all"}
                  disabled={!queries.length || loading ? true : false}
                  onClick={async () => {
                    await getRegressionResults();
                  }}
                >
                  Validate All
                </Button>
              </div>
            </div>
            {queries.length ? (
              <div className="px-4 my-4">
                <Input
                  className="rounded-md border-gray-300 w-40 p-1 px-2"
                  size="small"
                  type="text"
                  placeholder="Filter questions"
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                />
              </div>
            ) : (
              <div className="p-4 text-gray-500">
                Please add questions above or upload a JSON file.
              </div>
            )}

            <div className="flex flex-col">
              {queries.length ? (
                <div className="grid grid-cols-12 relative even:bg-gray-100 text-sm font-bold border-b">
                  <div className="col-span-2 p-4 border-r">Question</div>
                  <div className="col-span-4 p-4 border-r">Provided SQL</div>
                  <div className="col-span-4 p-4 border-r">Model SQL</div>
                  <div className="col-span-2 p-4">Result</div>
                </div>
              ) : null}

              {queries
                .filter((item) => {
                  return item.questions
                    .map((question) => {
                      return question
                        .toLowerCase()
                        .includes(filter.toLowerCase());
                    })
                    .some((item) => item);
                })
                .map((item, idx) => {
                  const previousQuestions = item.questions.slice(
                    0,
                    item.questions.length - 1
                  );

                  const mainQuestion = item.questions.slice(-1);

                  return (
                    <div
                      key={idx}
                      className="grid grid-cols-12 relative even:bg-gray-100"
                    >
                      {/* question + follow-on details */}
                      <div className="col-span-2 relative flex flex-col px-6 py-4 border-r">
                        <div className="previous-questions relative">
                          {previousQuestions.length > 0 && (
                            <>
                              <div className="absolute z-[2] top-0 -left-2 w-1 h-full border border-r-0 border-gray-300"></div>
                              {/* <div className="absolute z-[1] -bottom-[1.5em] -left-5 w-3 h-[50%] min-h-10 border-b border-l border-t border-gray-300"></div> */}
                            </>
                          )}

                          {previousQuestions.map((question, index) => {
                            return (
                              <div
                                key={index}
                                className={twMerge(
                                  "relative group text-sm mb-1"
                                )}
                              >
                                <div className="flex flex-row items-center">
                                  {question}
                                </div>
                              </div>
                            );
                          })}
                        </div>

                        <div className="main-question">
                          {mainQuestion.map((question, index) => {
                            return (
                              <div
                                key={index}
                                className={twMerge(
                                  "relative group text-lg font-semibold mb-4",
                                  questionToBeAdded.questions.length > 1 &&
                                    "mb-4 mt-2"
                                )}
                              >
                                <div className="flex flex-row items-center">
                                  {question}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>

                      {/* provided's sql */}
                      <div className="col-span-4 border-r p-4">
                        <CodeMirror
                          className="border border-gray-300"
                          extensions={[
                            codemirrorSql(),
                            EditorView.lineWrapping,
                          ]}
                          value={item.sql}
                          basicSetup={{
                            lineNumbers: false,
                          }}
                          ref={editor}
                          editable={false}
                        />
                      </div>

                      {/* model's sql */}
                      <div className="col-span-4 border-r p-4">
                        {item?.validationResult ? (
                          <CodeMirror
                            className="border border-gray-300"
                            extensions={[
                              codemirrorSql(),
                              EditorView.lineWrapping,
                            ]}
                            value={item?.validationResult?.model_sql}
                            basicSetup={{
                              lineNumbers: false,
                            }}
                            ref={editor}
                            editable={false}
                          />
                        ) : (
                          <></>
                        )}
                      </div>

                      <div className="col-span-2 p-4 border-r">
                        {item && !loading && item.validationResult ? (
                          item?.validationResult?.correct ? (
                            <div className="text-green font-semibold">
                              <CheckCircleOutlined className=" mr-2" />
                              Correct!
                            </div>
                          ) : (
                            <div className="text-red font-semibold">
                              <CloseCircleOutlined className=" mr-2" />
                              Incorrect!
                            </div>
                          )
                        ) : null}
                        <Button
                          loading={loading === item.id || loading === "all"}
                          disabled={loading ? true : false}
                          className="mt-2"
                          onClick={async () => {
                            await getRegressionResults(item);
                          }}
                        >
                          {item.validationResult ? "Re-validate" : "Validate"}
                        </Button>
                      </div>
                    </div>
                  );
                })}
            </div>
          </div>
        </div>
      </Scaffolding>
    </div>
  );
}
