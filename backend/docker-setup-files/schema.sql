-- holds the schema for all the required tables for the postgres db
-- all Owner: cloudsqlexternalsync have been changed to Owner: postgres
SET search_path TO public;
CREATE TABLE public.defog_docs (
    doc_id text NOT NULL,
    doc_md text,
    doc_blocks jsonb,
    editor_defog_blocks jsonb,
    api_key text NOT NULL,
    "timestamp" text,
    username text,
    doc_xml text,
    doc_uint8 jsonb,
    doc_title text,
    archived boolean default false
);

ALTER TABLE public.defog_docs OWNER TO postgres;

COMMENT ON COLUMN public.defog_docs.doc_blocks IS 'This is the internal blocknote/tiptap representation of the document. This INCLUDES the defog_blocks too like analysis, etc.';

COMMENT ON COLUMN public.defog_docs.editor_defog_blocks IS 'This is just a filtered version of the editor_blocks. Contains just the blocks with special analysis, etc that are generated by the model. These are included in the editor_blocks column.';

CREATE TABLE public.defog_recently_viewed_docs (
    api_key text NOT NULL,
    username text NOT NULL,
    recent_docs jsonb
);

ALTER TABLE public.defog_recently_viewed_docs OWNER TO postgres;

CREATE TABLE public.defog_analyses (
    api_key text NOT NULL,
    email text,
    "timestamp" text,
    approaches json,
    clarify jsonb,
    assignment_understanding jsonb,
    user_question text,
    analysis_id text NOT NULL,
    gen_steps jsonb,
    follow_up_analyses jsonb,
    parent_analyses jsonb,
    -- if this is a root analysis
    -- "versions" of a root analysis will have this as false
    is_root_analysis boolean default true,
    -- if this is a root analysis, this will be null
    -- if this is a version of a root analysis, this will be the analysis_id of the root analysis
    root_analysis_id text,
    -- direct_parent_id: when a new analysis is created using the new agent, this will be the analysis_id of the immediate
    -- parent after which the new one is being created
    -- think of it as "create analysis B by ~tweaking~ analysis A". A is the direct parent of B
    direct_parent_id text,
    username text
);

ALTER TABLE public.defog_analyses OWNER TO postgres;

CREATE TABLE public.defog_table_charts (
    data_csv jsonb,
    query text,
    chart_images jsonb,
    sql text,
    code text,
    table_id text NOT NULL,
    tool jsonb,
    edited boolean,
    error text,
    reactive_vars jsonb
);

ALTER TABLE public.defog_table_charts OWNER TO postgres;

CREATE TABLE public.defog_tool_runs (
    tool_run_id text NOT NULL,
    step jsonb,
    outputs jsonb,
    tool_name text,
    tool_run_details jsonb,
    error_message text,
    edited boolean,
    analysis_id text
);

ALTER TABLE public.defog_tool_runs OWNER TO postgres;

CREATE TABLE public.defog_tools (
    tool_name TEXT NOT NULL,
    function_name TEXT NOT NULL,
    description TEXT NOT NULL,
    code TEXT NOT NULL,
    input_metadata jsonb,
    output_metadata jsonb,
    toolbox TEXT DEFAULT NULL,
    disabled BOOLEAN NOT NULL DEFAULT FALSE,
    cannot_delete BOOLEAN NOT NULL DEFAULT FALSE,
    cannot_disable BOOLEAN NOT NULL DEFAULT FALSE
);

ALTER TABLE public.defog_tools OWNER TO postgres;
ALTER TABLE ONLY public.defog_tools
    ADD CONSTRAINT defog_tools_pkey PRIMARY KEY (function_name);

CREATE TABLE public.defog_users (
    username text NOT NULL,
    hashed_password text,
    token text NOT NULL,
    user_type text NOT NULL,
    created_at timestamp without time zone,
    allowed_dbs text
);

ALTER TABLE public.defog_users OWNER TO postgres;

CREATE TABLE public.defog_plans_feedback (
    api_key text NOT NULL,
    username text NOT NULL,
    user_question text NOT NULL,
    comments jsonb,
    is_correct boolean NOT NULL,
    -- join on this with the defog_analyses.analysis_id table to get the actual plan data
    analysis_id text NOT NULL,
    -- store for later reference. in case metadata changes later
    metadata text NOT NULL,
    client_description text,
    glossary text,
    db_type text NOT NULL
);
ALTER TABLE public.defog_plans_feedback OWNER TO postgres;

CREATE TABLE public.defog_db_creds (
    api_key text PRIMARY KEY,
    db_type text,
    db_creds jsonb
);
ALTER TABLE public.defog_db_creds OWNER TO postgres;


ALTER TABLE ONLY public.defog_plans_feedback
    ADD CONSTRAINT defog_plans_feedback_pkey PRIMARY KEY (analysis_id);

ALTER TABLE ONLY public.defog_docs
    ADD CONSTRAINT defog_docs_pkey PRIMARY KEY (api_key, doc_id);

ALTER TABLE ONLY public.defog_recently_viewed_docs
    ADD CONSTRAINT defog_recently_viewed_docs_pkey PRIMARY KEY (api_key, username);

ALTER TABLE ONLY public.defog_analyses
    ADD CONSTRAINT defog_analyses_pkey PRIMARY KEY (analysis_id, api_key);

ALTER TABLE ONLY public.defog_table_charts
    ADD CONSTRAINT defog_table_charts_pkey PRIMARY KEY (table_id);

ALTER TABLE ONLY public.defog_users
    ADD CONSTRAINT defog_users_pkey PRIMARY KEY (username);

ALTER TABLE ONLY public.defog_tool_runs
    ADD CONSTRAINT tool_runs_pkey PRIMARY KEY (tool_run_id);


-- Oracle tables and data

-- sources are not user or report specific and can be shared across multiple users/reports for now
CREATE TABLE IF NOT EXISTS oracle_sources (
    link TEXT PRIMARY KEY,
    title TEXT,
    position INT,
    source_type TEXT,
    attributes TEXT,
    snippet TEXT,
    text_parsed TEXT,
    text_summary TEXT
);

CREATE TABLE IF NOT EXISTS oracle_clarifications (
    clarification_id TEXT,
    report_id TEXT,
    llm_question TEXT,
    user_response TEXT,
    created_ts TIMESTAMP NOT NULL,
    resolved_ts TIMESTAMP,
    PRIMARY KEY (clarification_id, report_id)
);

CREATE TABLE IF NOT EXISTS oracle_reports (
    report_id SERIAL PRIMARY KEY,
    report_name TEXT,
    status TEXT,
    created_ts TIMESTAMP,
    api_key VARCHAR(255),
    username TEXT,
    inputs JSONB,
    outputs JSONB,
    feedback TEXT
);

-- this table keeps track of the mapping between the table's source url + position
-- within it and the table's name and description
CREATE TABLE IF NOT EXISTS imported_tables (
    table_url TEXT,
    table_position INT,
    table_name TEXT,
    table_description TEXT,
    PRIMARY KEY (table_url, table_position)
);