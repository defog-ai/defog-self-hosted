from pandasql import sqldf
import json
from io import StringIO
import os
from typing import Any, Dict

import pandas as pd

from oracle.constants import TaskType
from utils import execute_code
from utils_logging import LOGGER
from generic_utils import make_request

DEFOG_BASE_URL = os.environ.get("DEFOG_BASE_URL", "https://api.defog.ai")


async def optimize(
    api_key: str,
    username: str,
    report_id: str,
    task_type: TaskType,
    inputs: Dict[str, Any],
    outputs: Dict[str, Any],
):
    """
    This function is run after the explore stage, and if the task_type
    was "optimization".

    This function will optimize the objective input by the user, considering
    the context, data, and predictions generated.

    It will run some sql on the outputs generated by the explore stage, and based on the outputs of those sqls, prepare recommendations.
    """
    LOGGER.info(f"[Optimizer] Optimizing for report {report_id}")

    user_question = inputs["user_question"]
    explorer_outputs: list = outputs.get("explore", {})
    analyses = explorer_outputs.get("analyses", [])
    gather_context: dict = outputs.get("gather_context", {})

    # look at the user question, and make a decision on
    res = await make_request(
        DEFOG_BASE_URL + "/oracle/gen_optimization_task",
        data={
            "question": user_question,
            "api_key": api_key,
            "username": username,
            "report_id": report_id,
            "task_type": task_type.value,
            "gather_context": gather_context,
            "explore": explorer_outputs,
        },
    )

    LOGGER.debug(f"[Optimizer] Tasks: {json.dumps(res, indent=2)}")

    optimizer_outputs = {}

    processed_items = []

    for item in res["processing_list"]:
        qn_ids_to_df_name = item["qn_ids_to_df_name"]
        sqlite_query = item["sqlite_query"]

        for qn_id, df_name in qn_ids_to_df_name.items():
            relevant_explorer_output = [q for q in analyses if str(q["qn_id"]) == qn_id]
            if len(relevant_explorer_output) == 0:
                LOGGER.error(f"Did not find question id: {qn_id}")
                continue

            relevant_explorer_output = relevant_explorer_output[0]
            table_csv = (
                relevant_explorer_output.get("artifacts", {})
                .get("table_csv", {})
                .get("artifact_content", None)
            )
            if not table_csv:
                LOGGER.error(
                    f"Did not find csv data in the explorer's output: {relevant_explorer_output}"
                )
                continue

            df = pd.read_csv(StringIO(table_csv))
            globals()[df_name] = df

        try:
            LOGGER.debug(f"[Optimizer] Running SQL: {sqlite_query}")

            output = sqldf(sqlite_query, globals())
            output_str = (
                output.to_csv(index=False)
                if type(output) == pd.DataFrame
                else str(output)
            )

            processed = {"result": output_str}
            processed.update(item)

            LOGGER.debug(f"[Optimizer] Processed item: {processed}")

            processed_items.append(processed)
        except Exception as e:
            LOGGER.error(e)

    optimizer_outputs["processed_items"] = processed_items

    LOGGER.info("[Optimizer] Processing done\n")

    LOGGER.info(f"[Optimizer] Processed tasks: {json.dumps(processed_items, indent=2)}")

    # now using the above processed items
    # get the actual recommendations

    # now construct actual recommendations
    res = await make_request(
        DEFOG_BASE_URL + "/oracle/optimization_gen_recommendations",
        data={
            "question": user_question,
            "api_key": api_key,
            "username": username,
            "report_id": report_id,
            "task_type": task_type.value,
            "gather_context": gather_context,
            "explore": explorer_outputs,
            "processed_items": processed_items,
        },
    )

    LOGGER.info("[Optimizer] Recommendations generated")

    optimizer_outputs["recommendations"] = res["recommendations"]

    return optimizer_outputs
