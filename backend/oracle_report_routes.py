import os
from typing import Dict, List

from fastapi import APIRouter
from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel
from sqlalchemy.orm import Session
from sqlalchemy.sql import select
from oracle.utils_report import summary_dict_to_markdown
from db_utils import (
    OracleAnalyses,
    OracleReports,
    engine,
    get_report_data,
    validate_user,
)
from generic_utils import get_api_key_from_key_name
from oracle.constants import TaskStage
from utils import encode_image
from utils_logging import LOGGER

router = APIRouter()


class BasicRequest(BaseModel):
    """
    Basic request model for identifying the user and the api key.
    """

    key_name: str
    token: str

    model_config = {
        "json_schema_extra": {
            "examples": [{"key_name": "my_api_key", "token": "my_token"}]
        }
    }


class ReportRequest(BasicRequest):
    """
    Request model for identifying the report to be accessed / modified.
    """

    report_id: int

    model_config = {
        "json_schema_extra": {"examples": [{"key_name": "my_api_key", "report_id": 1}]}
    }


class GetReportImageRequest(ReportRequest):
    """
    Request model for accessing an image file within a report.
    """

    image_file_name: str

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "key_name": "my_api_key",
                    "report_id": 1,
                    "image_file_name": "chart.png",
                }
            ]
        }
    }


class ReportFeedbackRequest(ReportRequest):
    """
    Request model for providing feedback on a report.
    """

    feedback: str

    model_config = {
        "json_schema_extra": {
            "examples": [
                {"key_name": "my_api_key", "report_id": 1, "feedback": "Great report!"}
            ]
        }
    }


class ReportAnalysisRequest(ReportRequest):
    """
    Request model for requesting a specific analysis of a report.
    """

    analysis_id: int

    model_config = {
        "json_schema_extra": {
            "examples": [{"key_name": "my_api_key", "report_id": 1, "analysis_id": 1}]
        }
    }


@router.post("/oracle/list_reports")
async def reports_list(req: BasicRequest):
    """
    Get the list of reports that have been generated by the user, including
    those in progress. Returns a list of dictionaries, each containing:
    - report_id
    - report_name
    - status
    - date_created
    - feedback
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = (
            select(
                OracleReports.report_id,
                OracleReports.report_name,
                OracleReports.status,
                OracleReports.created_ts,
                OracleReports.inputs,
            )
            .where(OracleReports.api_key == api_key)
            .order_by(OracleReports.created_ts.desc())
        )
        result = session.execute(stmt)
        reports = result.fetchall()

    reports_list = [
        {
            "report_id": report.report_id,
            "report_name": report.report_name,
            "status": report.status,
            "date_created": report.created_ts.isoformat(),  # Convert to ISO 8601 string
            "inputs": report.inputs,
        }
        for report in reports
    ]
    return JSONResponse(status_code=200, content={"reports": reports_list})


@router.post("/oracle/download_report")
async def download_report(req: ReportRequest):
    """
    Given a report_id, this endpoint will return the report pdf file to the user.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)
    if "report_id" not in req:
        return JSONResponse(
            status_code=400,
            content={"error": "Bad Request", "message": "Missing 'report_id' field"},
        )
    report_id = req.report_id
    report_path = get_report_file_path(api_key, report_id)
    return FileResponse(report_path, media_type="application/pdf", filename=report_path)


@router.post("/oracle/delete_report")
async def delete_report(req: ReportRequest):
    """
    Given a report_id, this endpoint will delete the report from the system.
    Reports in progress will have their associated background tasks cancelled.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = select(OracleReports).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        report = result.scalar_one_or_none()
        if report:
            session.delete(report)
            session.commit()
            return JSONResponse(status_code=200, content={"message": "Report deleted"})
        else:
            return JSONResponse(status_code=404, content={"error": "Report not found"})


@router.post("/oracle/get_report_mdx")
async def get_report_mdx(req: ReportRequest):
    """
    Given a report_id, this endpoint will return the MDX string for the report stored in the postgres db.

    Will return status 400 if no string is found.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = select(OracleReports).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        report = result.scalar_one_or_none()

        if report:
            mdx = report.outputs.get(TaskStage.EXPLORE.value, {}).get("mdx", None)
            md = report.outputs.get(TaskStage.EXPLORE.value, {}).get("md", None)
            summary_dict = report.outputs.get(TaskStage.EXPORT.value, {}).get(
                "executive_summary", None
            )

            _, summary_mdx = summary_dict_to_markdown(summary_dict)
            mdx = f"{summary_mdx}\n\n{mdx}".strip()

            return JSONResponse(
                status_code=200,
                content={"mdx": mdx, "md": md},
            )
        else:
            return JSONResponse(
                status_code=404,
                content={"error": "Report not found"},
            )


@router.post("/oracle/get_report_feedback")
async def get_report_feedback(req: ReportRequest):
    """
    Given a report_id, this endpoint will return the feedback for the report.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = select(OracleReports).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        report = result.scalar_one_or_none()

        if report:
            return JSONResponse(status_code=200, content={"feedback": report.feedback})
        else:
            return JSONResponse(
                status_code=404,
                content={"error": "Report not found"},
            )


@router.post("/oracle/get_report_data")
async def get_report_data_endpoint(req: ReportRequest):
    """
    Given a report_id, this endpoint will returns all the data for this report. Returns the full row stored in the db.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    report_data = get_report_data(req.report_id, api_key)

    if "error" in report_data:
        return JSONResponse(status_code=404, content=report_data)
    else:
        return JSONResponse(status_code=200, content=report_data)


@router.post("/oracle/get_report_image")
async def get_report_image(req: GetReportImageRequest):
    """
    Given a report_id, this endpoint will return the image file as base 64 string.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    # construct the image path
    image_path = get_report_image_path(api_key, req.report_id, req.image_file_name)

    # load the image_path and convert to base64
    return JSONResponse(
        status_code=200,
        content={"encoded": encode_image(image_path)},
    )


@router.post("/oracle/feedback_report")
async def feedback_report(req: ReportFeedbackRequest):
    """
    Given a report id and the associated feedback, save the feedback with the report.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = select(OracleReports).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        report = result.scalar_one_or_none()
        if report:
            report.feedback = req.feedback
            session.commit()
            return JSONResponse(status_code=200, content={"message": "Feedback saved"})
        else:
            return JSONResponse(
                status_code=404,
                content={"error": "Report not found"},
            )


@router.post("/oracle/get_report_analysis_list")
async def get_report_analysis_list(req: ReportRequest):
    """
    Given a report_id, this endpoint will return the list of analyses for the report,
    stored as a list of dictionaries in the key `analyses`.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    with Session(engine) as session:
        stmt = select(OracleAnalyses).where(
            OracleAnalyses.api_key == api_key,
            OracleAnalyses.report_id == req.report_id,
        )
        result = session.execute(stmt).scalars().all()
        analyses = []
        for row in result:
            if not row.analysis_json or not row.mdx:
                continue
            analysis = {
                column.name: getattr(row, column.name)
                for column in OracleAnalyses.__table__.columns
            }
            analyses.append(analysis)

        return JSONResponse(status_code=200, content={"analyses": analyses})


@router.post("/oracle/get_report_analysis")
async def get_report_analysis(req: ReportAnalysisRequest):
    """
    Given a report_id and an analysis_id, this endpoint will return the analysis for the report.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)

    # get the report
    with Session(engine) as session:
        stmt = select(OracleReports.outputs).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        outputs = result.scalar_one_or_none()
        explore = outputs.get(TaskStage.EXPLORE.value, {})
        analyses = explore.get("analyses", {})
        for analysis in analyses:
            if analysis["qn_id"] == req.analysis_id:
                # replace qn_id with analysis_id
                analysis["analysis_id"] = req.analysis_id
                del analysis["qn_id"]
                return JSONResponse(status_code=200, content=analysis)
        return JSONResponse(status_code=404, content={"error": "Analysis not found"})


@router.post("/oracle/get_report_summary")
async def get_report_summary(req: ReportRequest):
    """
    Given a report_id, this endpoint will return the executive summary of the report.
    The executive summary will have links to the relevant analyses should the user want to
    dive deeper into a particular answer/insight.
    """
    if not validate_user(req.token, user_type=None, get_username=False):
        return JSONResponse(status_code=401, content={"error": "Unauthorized"})
    api_key = get_api_key_from_key_name(req.key_name)
    # get from export key's executive_summary
    executive_summary = None
    with Session(engine) as session:
        stmt = select(OracleReports.outputs).where(
            OracleReports.api_key == api_key,
            OracleReports.report_id == req.report_id,
        )
        result = session.execute(stmt)
        outputs = result.scalar_one_or_none()
        executive_summary = outputs.get(TaskStage.EXPORT.value, {}).get(
            "executive_summary", None
        )
    if executive_summary:
        return JSONResponse(
            status_code=200, content={"executive_summary": executive_summary}
        )
    else:
        return JSONResponse(
            status_code=404,
            content={"error": "Executive summary not found"},
        )


### HELPER FUNCTIONS ###


def get_report_image_path(api_key: str, report_id: str, image_file_name: str) -> str:
    """
    Helper function for getting the report image path based on the api_key, report_id and image file name.
    """
    return f"oracle/reports/{api_key}/report_{report_id}/{image_file_name}"


def get_report_file_path(api_key: str, report_id: str) -> str:
    """
    Helper function for getting the report file path based on the api_key and report_id.
    Reports are organized in the following directory structure:
    oracle/reports/{api_key}/report_{report_id}.pdf
    """
    report_dir = f"oracle/reports/{api_key}"
    if not os.path.exists(report_dir):
        os.makedirs(report_dir, exist_ok=True)
        LOGGER.debug(f"Created directory {report_dir}")
    report_file_path = f"{report_dir}/report_{report_id}.pdf"
    return report_file_path
