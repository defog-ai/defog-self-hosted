# builds image for the agents front end
# from here: https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile


FROM node:21-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR agents-app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN npm ci


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR agents-app

COPY --from=deps /agents-app/node_modules ./node_modules

COPY ./components ./components
COPY ./pages ./pages
COPY ./public ./public
COPY ./styles ./styles
COPY ./utils ./utils
# COPY jsconfig.json jsconfig.json
COPY next.config.js next.config.js
COPY package-lock.json package-lock.json
COPY package.json package.json
COPY README.md README.md
COPY .env.local .env.local

ENV NEXT_TELEMETRY_DISABLED 1

RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR agents-app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /agents-app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /agents-app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /agents-app/.next/static ./.next/static

USER nextjs

EXPOSE 1234

ENV PORT 1234

# set hostname to localhost
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]
