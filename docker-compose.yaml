version: "3"
services:
  agents-postgres:
    image: postgres:16-alpine
    networks:
      - agents-network
    environment:
      POSTGRES_DB: postgres
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - agents-postgres:/var/lib/postgresql/data

  agents-python-server:
    environment:
      - SALT=${SALT}
      - DEFOG_API_KEY=${DEFOG_API_KEY} # for backwards compatibility. avoid using DEFOG_API_KEY going forward due to potential conflicts with usage in defog-python
      - DEFOG_API_KEYS=${DEFOG_API_KEYS}
      - DEFOG_API_KEY_NAMES=${DEFOG_API_KEY_NAMES}
      - DEFOG_BASE_URL=${DEFOG_BASE_URL:-https://api.defog.ai}
      - DEFOG_GENERATE_URL=${DEFOG_GENERATE_URL:-https://api.defog.ai/generate_query_chat}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - DBHOST=${DEFOG_DBHOST:-agents-postgres}
      - DBPORT=${DEFOG_DBPORT:-5432}
      - DATABASE=${DEFOG_DATABASE:-postgres}
      - DBUSER=${DEFOG_DBUSER:-postgres}
      - DBPASSWORD=${DEFOG_DBPASSWORD:-postgres}
      - IMPORTED_TABLES_DBNAME=${IMPORTED_TABLES_DBNAME:-imported_tables}
      - REDIS_INTERNAL_HOST=${REDIS_INTERNAL_HOST:-agents-redis}
      - REDIS_INTERNAL_PORT=${REDIS_INTERNAL_PORT:-6379}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LLM_CALLS_URL=${LLM_CALLS_URL}
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/backend
      - INTERNAL_DB=${INTERNAL_DB:-postgres}
      - LLM_SERVER_ENDPOINT=${LLM_SERVER_ENDPOINT}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME}
      - STRIPE_ACCOUNT_ID=${STRIPE_ACCOUNT_ID}
      - STRIPE_CLIENT_SECRET=${STRIPE_CLIENT_SECRET}
      - GOOGLE_ANALYTICS_CREDS_PATH=${GOOGLE_ANALYTICS_CREDS_PATH}
      - GOOGLE_ANALYTICS_PROPERTY_IDS=${GOOGLE_ANALYTICS_PROPERTY_IDS}
      - ORACLE_ENABLED=yes
      - ANALYZE_DATA=${ANALYZE_DATA:-no}
      - ANALYZE_DATA_MODEL=${ANALYZE_DATA_MODEL:-defog}
      - PROD=${PROD:-yes}

      # Email configuration
      - EMAIL_OPTION=${EMAIL_OPTION:-DEFOG}
      - FROM_EMAIL=${FROM_EMAIL}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DELETE_EXISTING_TOOLS=${DELETE_EXISTING_TOOLS:-no}

      # for users that want to use OpenAI for narrative generation
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # front end non-admin config
      - HIDE_SQL_TAB_FOR_NON_ADMIN=${HIDE_SQL_TAB_FOR_NON_ADMIN}
      - HIDE_PREVIEW_TABS_FOR_NON_ADMIN=${HIDE_PREVIEW_TABS_FOR_NON_ADMIN}
      - HIDDEN_CHARTS_FOR_NON_ADMIN=${HIDDEN_CHARTS_FOR_NON_ADMIN}
      - HIDE_RAW_ANALYSIS_FOR_NON_ADMIN=${HIDE_RAW_ANALYSIS_FOR_NON_ADMIN}
    build:
      context: .
      dockerfile: dockerfile.agents-python-server
    restart: always
    stop_grace_period: 1s
    ports:
      - "1235:1235"
    volumes:
      - ./backend:/backend
    depends_on:
      - agents-postgres
      - agents-redis
    networks:
      - agents-network

  agents-nginx:
    build:
      context: .
      dockerfile: dockerfile.agents-nginx
    ports:
      - "${PORT:-80}:80"
      - "443:443"
    depends_on:
      - agents-python-server
    networks:
      - agents-network

  agents-redis:
    image: redis:7-alpine
    networks:
      - agents-network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 128M
    command: >
      redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    environment:
      - REDIS_MAXMEMORY=128mb

volumes:
  agents-postgres:
  redis-data:

networks:
  agents-network:
